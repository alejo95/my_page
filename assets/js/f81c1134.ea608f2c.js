"use strict";(self.webpackChunkmy_page=self.webpackChunkmy_page||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"entendiendo_nginx","metadata":{"permalink":"/blog/entendiendo_nginx","editUrl":"http://iamdevops.site/my_page/edit/main/blog/2025/repository_management/blog_nginx.md","source":"@site/blog/2025/repository_management/blog_nginx.md","title":"Nginx","description":"Durante alg\xfan tiempo me he topado con el problema de entender qu\xe9 es Nginx y c\xf3mo funciona, debido a que es un","date":"2025-05-15T00:00:00.000Z","tags":[{"inline":false,"label":"Nginx","permalink":"/blog/tags/tags/nginx"},{"inline":false,"label":"Redes","permalink":"/blog/tags/tags/redes"}],"readingTime":4.805,"hasTruncateMarker":true,"authors":[{"name":"Alejandro Ram\xedrez","title":"Software Engineer | DevOps | Back-end Developer","url":"https://alejo95.github.io/my_page/about_me","description":"Alejandro Ram\xedrez is a back-end developer with a passion for creating efficient and scalable applications. He has a strong background in software development and is always eager to learn new technologies.\\n","social":{"linkedin":"https://www.linkedin.com/in/alejandro-ramirez-95/"},"imageURL":"https://avatars.githubusercontent.com/u/30883786?s=96&v=4","key":"alejandro-ramirez","page":null}],"frontMatter":{"slug":"entendiendo_nginx","sidebar_position":1,"title":"Nginx","tags":["nginx","redes"],"authors":"alejandro-ramirez","date":"2025-05-15T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"Manejo del repositorio","permalink":"/blog/manejo-del-repositorio"}},"content":"\x3c!-- truncate --\x3e\\n\\n    Durante alg\xfan tiempo me he topado con el problema de entender qu\xe9 es Nginx y c\xf3mo funciona, debido a que es un\\n    poco confuso, ya que muchas personas hablan de que es un servidor web, un balanceador de cargas, tambi\xe9n un Proxy\\n    inverso y m\xe1s, claro es porque tiene todas estas funcionalidades, as\xed que en este blog exploraremos juntos c\xf3mo\\n    funciona y realizaremos algunas pruebas para ver sus diferentes usos.\\n\\n        <img src=\\"/img/blog/nginx/nginx.png\\" alt=\\"contenedor\\" width=\\"600\\" />\\n\\n## \xbfQu\xe9 es Nginx? \ud83e\udee3\\n\\n    En principio es un software de c\xf3digo abierto que funciona principalmente como servidor web, que tal y como hablamos\\n    en un principio tiene diferentes funcionalidades, ya que fue creado para mejorar el rendimiento y la estabilidad de\\n    las aplicaciones web, en especial cuando hablamos de entornos de alta demanda, o sea cuando tenemos una aplicaci\xf3n que\\n    tienen muchos peticiones.ndo hablamos de entornos de alta demanda, osea cuando tenemos una aplicaci\xf3n que tienen\\n    muchos peticiones.\\n\\n### Funcionalidaes de Nginx \ud83e\uddf0\\n\\nNginx es un servidor web que puede acturar como:\\n\\n    - Servidor web startico: sirve para manejar archivos como html, css y imagenes.\\n    - Poxy inverso: reenvia peticiones a otros setvidores (como Node Js, Python).\\n    - Balancedor de cargas: distribuye el trafico entre los servidores para evitar sobre cargas.\\n    - servidor de cache: guarda copias temporales para acelear las respuestas.\\n\\n### Instalaci\xf3n en Ubuntu \ud83d\udc68\u200d\ud83d\udcbb\\n\\n    En este caso realizaremos la instalaci\xf3n en Bubuntu, para que puedas realizar algunas pruebas tambien\\n    tendras el codigo disponible para que puedas utilizarlo en tu.\\n\\n        ``` bash title=\\" Bash\\"\\n        sudo apt update           #  actualizat linux\\n        sudo apt install nginx    #  instalar nginx\\n        ```\\n    una vez instalado podremos probar si Nginx esta corriendo adecuadamente usando\\n\\n        ``` bash title=\\" Bash\\"\\n        sudo systemctl status nginx\\n        ```\\n\\n    lo cual mostra algo asi si todo sale correctamente \ud83e\udd73\\n\\n        <img src=\\"/img/blog/nginx/nginx_status.png\\" alt=\\"contenedor\\" width=\\"800\\" />\\n\\n    de esta forma podremos saber si nuestro servido Nginx fue instalado de una forma correcta y esta funcionando\\n    desde este punto podremos las diferente carracteristicas de Nginx\\n\\n### Estructura de Nginx \ud83c\udfd7\ufe0f\\n\\nla estructura de Nginx es la siguiente que se genera automaticamente al instalar\\n\\n    ``` bash title=\\" Bash\\"\\n    /etc/nginx/\\n    \u251c\u2500\u2500 nginx.conf             # Configuraci\xf3n principal\\n    \u251c\u2500\u2500 sites-available/       # Configs de sitios disponibles\\n    \u251c\u2500\u2500 sites-enabled/         # Enlaces a sitios activos\\n    \u2514\u2500\u2500 conf.d/                #Configs adicionales (opcional)\\n    ```\\n\\n### Implemetando Nginx como servidor web \ud83d\udda5\ufe0f\\n\\nLa primera implementaci\xf3n que realizaremos es crear una pagina simple, sigue los pasos y podras crear\\ntu primer servidor web con Nginx en un servidor de linux.\\n\\n1. Crearemos una capeta en nuestro servidor \ud83d\udcc2\\n\\n        ``` bash title=\\" Bash\\"\\n        sudo mkdir -p /var/www/miweb\\n        ```\\n        - ```-p``` crea carpetas intermedias si no existen.\\n        - ```/var/www/``` es el lugar t\xedpico donde se alojan los sitios web.\\n\\n    este comando nos creara una carpeta en la ruta que le indicamos\\n\\n2. Es hora de crear nuestra super pagina \ud83d\udd28\\n    `bash title=\\" Bash\\"\\n    echo \\"<h1>Hola Bienvenidos a I am Devops </h1>\\" | sudo tee /var/www/miweb/index.html\\n   `\\n    Esto nos creara un archivo index.html con un mensaje.\\n    Puedes editarlo despu\xe9s con un editor como nano, vim o Visual Studio Code.\\n    en caso de que estes en un servidor de linux o uno de sus derivados es mas factible usar nano o vim\\n\\n3. Configuraci\xf3n de nuestro sitio \u2699\ufe0f\\n\\n    Nginx usa un archivo de configuraci\xf3n que nos permite saber c\xf3mo manejar los archivos\\n    ya que podemos tener alojado mas de una _web estatica_ dentro de nuestro servidor para crear nuestro achivo de confiraci\xf3n,\\n\\n         ``` bash title=\\" Bash\\"\\n         sudo nano /etc/nginx/sites-available/miweb\\n         ```\\n         ``` bash title=\\" site-avalible\\"\\n         server {\\n             listen 80;                       # Escucha en el puerto 80 (HTTP)\\n             server_name localhost;           # Nombre del servidor (puede ser dominio o IP)\\n\\n             root /var/www/miweb;             # Ruta al contenido del sitio\\n             index index.html;                # Archivo que se abre por defecto\\n\\n             location / {\\n                 try_files $uri $uri/ =404;   # Busca el archivo, si no existe, da error 404\\n             }\\n         }\\n         ```\\n\\n4. Habilitando nuestro sitio \ud83d\udd13\\n\\n    para poder habilitar nuestro sitio es necesrio vincular nueso `site-available/` a nuestro `site-enabled`\\n    para realizar ejecutaremos el siguiente comando para que se vincule\\n\\n    la ruta que debemos buscar si queremos encontrar estos archivos puede `/etc/nginx/sites-available/miweb` que es donde\\n    tendras a disponibles todos los archivos de nginx.\\n\\n    - **sites-available** : es el lugar donde estan configurados todos los sitios que se quieren habilitar.\\n    - **sites-enabled** : es donde le damos luz verde para poder salir.\\n\\n    en primer lugar iremos a `sites-available` y crearemos un archivo con el nombre de nuesto site\\n\\n       ```bash title=\\"Bash\\"\\n        vim /etc/nginx/sites-available/miweb\\n        ```\\n\\n    de esta forma crearemos un archivo de configuraci\xf3n para nuestra pagina en nuestro servidor de ubuntu\\n    este caso es para un servidor en local, en un futuro aprenderemos como hacer para que lo hagas en produci\xf3n\\n\\n        ```html title=\\"html\\"\\n            listen 80;\\n            listen [::]:80;\\n            root /var/www/miweb;\\n            server_name localhost;\\n            \\n            index index.html index.html;\\n\\n            location / {\\n                try_files $uri $uri/ =404;\\n            }\\n        }\\n        ```\\n\\n    una vez ya creado nuestro archivo estatico y nuestar configurac\xf3n, crearemos un simbolo de nuestro archivo en la\\n    carpeta `sites-enabled`\\n\\n        ```bash title=\\"Bash\\"\\n        sudo ln -s /etc/nginx/sites-available/miweb /etc/nginx/sites-enabled/\\n        ```\\n\\n5. validaci\xf3n de la configurac\xf3n \ud83e\udd73\\n   para este corrierndo corriendo el comando de test que trae nginx\\n\\n        ```bash title=\\"Bash\\"\\n        sudo nginx -t\\n        ```\\n        si todo esta corercto te saldra un mensaje parecido al siguiente\\n        <img src=\\"/img/blog/nginx/nginx_config.png\\" alt=\\"contenedor\\" width=\\"600\\" />\\n\\n## Los errores \ud83d\ude05\\n\\n    Claramente todos cometemos errores y no estamos excentos de ello, por eso dejo este espacio\\n    ya que cometi algunos errores, donde me ha tocado inciar de 0.\\n\\n    Para eliminar totalmente nginx usamos lo siguiente\\n    ```bash title=\\"Bash\\"\\n    sudo apt remove --purge nginx nginx-common -y ---   # Eliminamos totalmente nginx\\n    sudo apt autoremove -y\\n    sudo rm -rf /etc/nginx /var/www/miweb               # Eliminamos los archivos creados\\n    ```\\n    de aqui solo queda volver a instalar *Ngnx* y volver a inciar nuestra configuraci\xf3n de cero.\\n\\n## Novemos en la 2 parte de este blog \ud83e\uddd0"},{"id":"manejo-del-repositorio","metadata":{"permalink":"/blog/manejo-del-repositorio","editUrl":"http://iamdevops.site/my_page/edit/main/blog/2025/repository_management/repository_management.md","source":"@site/blog/2025/repository_management/repository_management.md","title":"Manejo del repositorio","description":"Hola y bienvenidos a este blog, el cual est\xe1 orientado a entender como podemos manejar nuestros flujo","date":"2025-04-27T00:00:00.000Z","tags":[{"inline":false,"label":"Git","permalink":"/blog/tags/tags/git"},{"inline":false,"label":"Workflow","permalink":"/blog/tags/tags/workflow"},{"inline":false,"label":"Buenas Pr\xe1cticas","permalink":"/blog/tags/tags/buenas-practicas"}],"readingTime":3.295,"hasTruncateMarker":true,"authors":[{"name":"Alejandro Ram\xedrez","title":"Software Engineer | DevOps | Back-end Developer","url":"https://alejo95.github.io/my_page/about_me","description":"Alejandro Ram\xedrez is a back-end developer with a passion for creating efficient and scalable applications. He has a strong background in software development and is always eager to learn new technologies.\\n","social":{"linkedin":"https://www.linkedin.com/in/alejandro-ramirez-95/"},"imageURL":"https://avatars.githubusercontent.com/u/30883786?s=96&v=4","key":"alejandro-ramirez","page":null}],"frontMatter":{"slug":"manejo-del-repositorio","sidebar_position":0,"title":"Manejo del repositorio","tags":["git","workflow","buenas-practicas"],"authors":"alejandro-ramirez","date":"2025-04-27T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Nginx","permalink":"/blog/entendiendo_nginx"}},"content":"\x3c!-- truncate --\x3e\\n\\nHola y bienvenidos a este blog, el cual est\xe1 orientado a entender como podemos manejar nuestros flujo\\nde trabajo en git, haciendolo un poco mas claro y facil de entender en caso de tener algun problema\\nen **producci\xf3n** \ud83d\udca3 que es lo que no queremos que pase.\\n\\n## 1. Manejo de commits\\n\\nAl momento que generamos un commit es muy normal agregar el comentario sin una referencia las cuales nos\\nindiquen que estamos realizando en nuestro commit, para esto es recomendable usar banderas que nos permitan\\nentender que hicimos en nuestros commits para esto hacemos uso de las siguientes **Acciones** o **banderas**:\\n\\n- **[Acci\xf3n]**: identifica el tipo de commit\\n  - `feature` -  Se introduce una nueva caracter\xedstica con los cambios\\n  - `refactor` \u2013 C\xf3digo refactorizado que no corrige un error ni agrega una caracter\xedstica  \\n  - `docs` \u2013 Actualizaciones de la documentaci\xf3n, como el README u otros archivos de rebajas\\n  - `style` \u2013 Cambios que no afectan el significado del c\xf3digo, probablemente relacionados con el formato del c\xf3digo, como espacios en blanco, punto y coma faltantes, etc.\\n  - `test` \u2013 Incluyendo pruebas nuevas o corrigiendo pruebas anteriores\\n  - `perf` \u2013 Mejoras de rendimiento\\n  - `ci` \u2013 Relacionados con la integraci\xf3n continua\\n  - `build` \u2013 Cambios que afectan al sistema de compilaci\xf3n o dependencias externas\\n  - `revert` \u2013 revierte una confirmaci\xf3n anterior\\n\\n- **Cuerpo**: Entre 50 y 150 caracteres resaltando **\xbfqu\xe9?** y **\xbfpor qu\xe9?**.  \\n- **Idioma**: Ingl\xe9s.\\n\\n> **Ejemplo**  \\n> `[Added] validation so that the accounting information in the vendor once audited cannot be modified`  \\n> *(Comienza con may\xfascula y sin punto final.)*\\n\\n---\\n\\n## 1.2. Nomenclatura de ramas (branch)\\n\\nCon la nomenclatura la idea es siempre buscar identificar las ramas donde estamos trabajando y as\xed llevar\\nun flujo de versiones saludable, que sea f\xe1cil de entender, en este ejemplo usaremos una nomenclatura basada\\nen el flujo de trabajo de Git Flow.\\n\\nSiguiendo Git Flow te encontrar\xe1s con las siguientes ramas:\\n\\n- **master**: versiones estables en producci\xf3n (`vX.Y.Z`).  \\n- **develop**: integraci\xf3n de nuevas features.  \\n- **feature/***: desarrollo de caracter\xedsticas (desde `develop`).  \\n- **release/***: preparaci\xf3n de la pr\xf3xima versi\xf3n (desde `develop`).  \\n- **hotfix/***: correcciones urgentes (desde `master`).\\n\\n![Git Flow Diagram](/img/blog/Deploymentflow.png)\\n\\n---\\n\\n### Hoja de trucos (Comandos)\\n\\nEsta hoja de trucos tiene los **comandos** mas utilizados dentro del flujo de trabajo \ud83e\uddd1\ud83c\udffc\u200d\ud83d\udcbb, dentro de mi\\nconsideraci\xf3n son los que mas usaras durante tu carrera como programor o algunas de sus ramas.\\n\\naqui les dejo \ud83d\udc4c\\n\\n---\\n\\n| Operaci\xf3n                                    | Comando                                                |\\n|----------------------------------------------|--------------------------------------------------------|\\n| Clonar repositorio                           | `git clone ssh://usuario@dominio.com/repo.git`         |\\n| Crear repo local                             | `git init`                                             |\\n| Estado de archivos                           | `git status`                                           |\\n| Ver diferencias                              | `git diff`                                             |\\n| A\xf1adir todos los cambios                     | `git add .`                                            |\\n| Commit con mensaje                           | `git commit -m \\"Mensaje descriptivo\\"`                  |\\n| Modificar \xfaltimo commit                      | `git commit --amend`                                   |\\n\\n---\\n\\n## Ramas y etiquetas\\n\\n| Operaci\xf3n                        | Comando                        |\\n|----------------------------------|--------------------------------|\\n| Listar ramas                     | `git branch`                   |\\n| Crear nueva rama                 | `git branch <nombre>`          |\\n| Cambiar de rama                  | `git checkout <nombre>`        |\\n| Etiquetar versi\xf3n                | `git tag v1.2.3`               |\\n\\n---\\n\\n## Actualizar y publicar\\n\\n| Operaci\xf3n                      | Comando                              |\\n|--------------------------------|--------------------------------------|\\n| Descargar cambios sin merge    | `git fetch`                          |\\n| Descargar y merge              | `git pull origin <branch>`           |\\n| Enviar cambios a remoto        | `git push origin <branch>`           |\\n| Enviar etiquetas               | `git push --tags`                    |\\n\\n---\\n\\n## Fusionar y rebase\\n\\n| Operaci\xf3n                | Comando                           |\\n|--------------------------|-----------------------------------|\\n| Merge                    | `git merge <branch>`              |\\n| Rebase                   | `git rebase <branch>`             |\\n| Abortar rebase           | `git rebase --abort`              |\\n| Continuar rebase         | `git rebase --continue`           |\\n\\n---\\n\\n## Deshacer\\n\\n| Operaci\xf3n                              | Comando                                 |\\n|----------------------------------------|-----------------------------------------|\\n| Reset total (descarta todo)            | `git reset --hard HEAD`                 |\\n| Descartar cambios en un archivo        | `git checkout HEAD <file>`              |\\n| Revertir un commit                     | `git revert <commit>`                   |\\n| Reset suave (preserva cambios staged)  | `git reset <commit>`                    |\\n\\n---"}]}}')}}]);