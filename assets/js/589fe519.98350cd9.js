"use strict";(self.webpackChunkmy_page=self.webpackChunkmy_page||[]).push([[3489],{240:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>d});var n=s(8105),r=s(4848),i=s(8453);const o={slug:"liquibase",sidebar_position:3,title:"Database DevOps con Liquibase",tags:["liquibase","database","devops","databasedevops"],authors:"alejandro-ramirez",date:new Date("2025-06-12T00:00:00.000Z")},l=void 0,c={authorsImageUrls:[void 0]},d=[{value:"\xbfQues Database DevOps? \ud83d\udc68\u200d\ud83d\udcbb",id:"ques-database-devops-",level:2},{value:"\xbfPorque surge esta problematica? \ud83d\ude27",id:"porque-surge-esta-problematica-",level:2},{value:"Una soluci\xf3n entre muchas \ud83d\udd27",id:"una-soluci\xf3n-entre-muchas-",level:2},{value:"Laboratorio Liquibase \ud83e\uddea",id:"laboratorio-liquibase-",level:2},{value:"\u2699\ufe0f Requisitos previos",id:"\ufe0f-requisitos-previos",level:3},{value:"Instalar Docker (Necesario)",id:"instalar-docker-necesario",level:3},{value:"Instalar Homebrew (si no lo tienes)",id:"instalar-homebrew-si-no-lo-tienes",level:3},{value:"JAVA JDK (opcional)",id:"java-jdk-opcional",level:3},{value:"Instalemos el CLI de liquibase (Opcional)",id:"instalemos-el-cli-de-liquibase-opcional",level:3},{value:"Instalar cliente PostgreSQL (opcional)",id:"instalar-cliente-postgresql-opcional",level:3},{value:"Iniciemos con nuestro laboratorio \ud83d\ude03",id:"iniciemos-con-nuestro-laboratorio-",level:3},{value:"\ud83d\uddc2\ufe0f estructura del proyecto",id:"\ufe0f-estructura-del-proyecto",level:3},{value:"\ud83d\udcdd Descripci\xf3n de Archivos y Carpetas",id:"-descripci\xf3n-de-archivos-y-carpetas",level:4},{value:"\ud83e\ude84 Crea rapidamente la estructura desde cero",id:"-crea-rapidamente-la-estructura-desde-cero",level:4},{value:"\ud83c\udfd7\ufe0f Cremos nuestro Docker-compose",id:"\ufe0f-cremos-nuestro-docker-compose",level:2},{value:"Creemos nuestro liquibase.properties",id:"creemos-nuestro-liquibaseproperties",level:2},{value:"\ud83e\udde0 Vamos a crear nuestro changelog",id:"-vamos-a-crear-nuestro-changelog",level:2},{value:"Vamos a correr nuestro poyecto",id:"vamos-a-correr-nuestro-poyecto",level:3},{value:"\ud83e\udde0 \xbfC\xf3mo sabe Liquibase qu\xe9 ya corri\xf3?",id:"-c\xf3mo-sabe-liquibase-qu\xe9-ya-corri\xf3",level:3},{value:"\ud83e\udde0 \xbfPor qu\xe9 se crea autom\xe1ticamente?",id:"-por-qu\xe9-se-crea-autom\xe1ticamente",level:3},{value:"\xbfC\xf3mo funciona el rollback?",id:"c\xf3mo-funciona-el-rollback",level:3},{value:"Como podemos rollback",id:"como-podemos-rollback",level:3},{value:"\ud83d\udd01 Ejemplo de rollback",id:"-ejemplo-de-rollback",level:4},{value:"\ud83d\udd01 1. Rollback de un changeSet espec\xedfico (desde 003)",id:"-1-rollback-de-un-changeset-espec\xedfico-desde-003",level:4},{value:"\ud83d\udd01 2. Rollback por ID",id:"-2-rollback-por-id",level:4},{value:"Tabla comandos \ud83c\udfae",id:"tabla-comandos-",level:3},{value:"Errores",id:"errores",level:2},{value:"Gracias \ud83e\udd29 por llegar hasta este punto",id:"gracias--por-llegar-hasta-este-punto",level:3},{value:"Mi punto de vista",id:"mi-punto-de-vista",level:3}];function t(e){const a={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:["Hola, amigos \ud83d\ude03 DevOps. Hoy hablaremos sobre ",(0,r.jsx)(a.strong,{children:"Database DevOps"}),"."]}),"\n",(0,r.jsx)(a.p,{children:"Como bien sabemos, DevOps ha sido clave en el desarrollo de aplicaciones, especialmente al facilitar los procesos de entrega\ncontin\xfaa e integrando a los equipos de desarrollo y operaciones en flujos de trabajo \xe1giles y optimizados."}),"\n",(0,r.jsx)(a.p,{children:"Sin embargo, muchas veces durante el desarrollo de una aplicaci\xf3n omitimos la importancia de las bases de datos. Nos enfocamos en\nescribir c\xf3digo y en contar con herramientas que permitan hacer Rollback de nuestro c\xf3digo de forma r\xe1pida en caso de alg\xfan error.\nPero hacer Rollback en una base de datos puede ser mucho m\xe1s delicado y perjudicial si no se maneja correctamente."}),"\n",(0,r.jsxs)(a.p,{children:["Por eso, dentro de DevOps se han implementado herramientas y pr\xe1cticas que nos permiten gestionar los cambios en bases de datos \ud83d\udcc8\nde manera segura y eficiente. En este blog veremos c\xf3mo usar ",(0,r.jsx)(a.strong,{children:"Liquibase"})," y c\xf3mo puede ayudarnos a mejorar nuestro flujo de\ntrabajo y de esta forma mantener nuestra base de datos de una forma consistente."]}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/databasedevops.png",alt:"contenedor",width:"600"}),"\n",(0,r.jsx)(a.h2,{id:"ques-database-devops-",children:"\xbfQues Database DevOps? \ud83d\udc68\u200d\ud83d\udcbb"}),"\n",(0,r.jsxs)(a.p,{children:["Es traer las pr\xe1cticas y principios implementados en el mundo del ",(0,r.jsx)(a.strong,{children:"DevOps"})," buscando garantizar que el c\xf3digo de las bases de\nlos datos se incluyen en el mismo proceso que el c\xf3digo de desarrollo. Con esto buscamos solucionar el cuello de botella que se\npuede presentar al momento de generar los cambios en el c\xf3digo de la base de datos, ya que en muchos de los casos estos cambios\ntienen que ser validados por un ",(0,r.jsx)(a.strong,{children:"DBA"}),"(data base administrador) y facilit\xe1ndole el trabajo, ya que ellos se encargaran de\nenfocarse en temas respecto a la base de datos."]}),"\n",(0,r.jsx)(a.h2,{id:"porque-surge-esta-problematica-",children:"\xbfPorque surge esta problematica? \ud83d\ude27"}),"\n",(0,r.jsx)(a.p,{children:"Esta problem\xe1tica se da debido a que muchas veces los programadores realizan actualizaciones en el c\xf3digo fuente de las\naplicaciones que algunas ocasiones implementa cambios en el c\xf3digo de la base de datos, estos cambios tenemos que llevarlos\na cabo haciendo uso de SQL."}),"\n",(0,r.jsx)(a.p,{children:"Para entender esto de una forma m\xe1s f\xe1cil dejar\xe9 un diagrama que muestra el flujo manual que se suele llevar por un equipo\nconvencional de DBA generando pausa entre cada paso (generando un cuello de botella)."}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/vidadeldesarollo.png",alt:"contenedor",width:"700"}),"\n",(0,r.jsx)(a.p,{children:"debido a que estos procesos funcionan de una forma manual, deben llevarse a cabo las revisiones del c\xf3digo de base datos\nsuele ser lo ultimo en realizarse suele generar un retraso en el lanzamiento. Esto genera un problema, pues genera un retraso\ngenerando problemas pues la validaci\xf3n y revisi\xf3n no son eficientes. Todo proceso de cambio en la base de datos es simplemente\nun obst\xe1culo."}),"\n",(0,r.jsx)(a.h2,{id:"una-soluci\xf3n-entre-muchas-",children:"Una soluci\xf3n entre muchas \ud83d\udd27"}),"\n",(0,r.jsxs)(a.p,{children:["En este caso como hemos hablado desde un principio aqu\xed es donde entra nuestra soluci\xf3n ",(0,r.jsx)(a.strong,{children:"Liquidbase"})," como una herramienta echa\npara quitar esas paradas innecesarias, donde el ",(0,r.jsx)(a.strong,{children:"DBA"})," debe revisar los cambios hasta la fase final, sin la necesidad de hacer\nlas revisiones en etapas tempranas del proceso y as\xed empaquetar todo el c\xf3digo."]}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/unficacionvidadelsoftware.png",alt:"contenedor",width:"700"}),"\n",(0,r.jsxs)(a.p,{children:["Una soluci\xf3n DevOps de bases de datos como ",(0,r.jsx)(a.a,{href:"https://www.liquibase.com/how-liquibase-works",children:"Liquibase"}),". Permite a los equipos\nautomatizar y gestionar la gesti\xf3n de cambios para optimizar este cuello de botella y acelerar los procesos de las\naplicaciones. Esto es lo que hace que esta soluci\xf3n sea tan valiosa."]}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"Liquibase"})," Nos permite gestionar estas actualizaciones de una forma f\xe1cil y que igual forma nos permite realizar un Rollback\nde una forma f\xe1cil y r\xe1pida, ayud\xe1ndonos a mantener la consistencia en la base datos, adem\xe1s nos permite llevar un controlo de\nversiones, la cual realizar de una forma inicial manualmente y en el futuro tambi\xe9n nos permite automatizar este proceso."]}),"\n",(0,r.jsx)(a.h2,{id:"laboratorio-liquibase-",children:"Laboratorio Liquibase \ud83e\uddea"}),"\n",(0,r.jsxs)(a.p,{children:["Hoy realizare la implementaci\xf3nde liquidase si quieres implementarlodejare los paso para que lo sigas y tambi\xe9npuedas\nimplementarlo en t\xfa m\xe1quina si quieres implementarlo a un ",(0,r.jsx)(a.strong,{children:"CI/CD"})," debemos realizar otros paso, en esta primer guia,\nencuentrasla implementaci\xf3n de liquibase donde el objetivo es aprender como liquibase gestiona cambios en las bases de datos de\nforma controlada usando archivos de tipo chagelog( YAML, XML, JSON o SQL). ",(0,r.jsx)(a.strong,{children:"Vamos! \ud83e\udd73"})]}),"\n",(0,r.jsx)(a.h3,{id:"\ufe0f-requisitos-previos",children:"\u2699\ufe0f Requisitos previos"}),"\n",(0,r.jsx)(a.p,{children:"antes de comenzar debemos tener los siguiente recursos instalados en nuestro equipo \ud83d\udcbb en este caso realizamos la configuraci\xf3n\nen macOs, dejare una referencia para que instales en Linux."}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Docker"}),": lo usaremos para levantar nuestra base de datos de prueba y nuestro liquibase"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Editor de codigo"}),": En mi caso usare VS Code"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Java JDK"})," 11 o Superior  (opcional)"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Liquibase(CLI)"})," Herramienta a usar (opcional)"]}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"instalar-docker-necesario",children:"Instalar Docker (Necesario)"}),"\n",(0,r.jsxs)(a.p,{children:["Para crear bases de datos de prueba sin instalar nada m\xe1s en tu Mac Ve a ",(0,r.jsx)(a.a,{href:"https://docs.docker.com/desktop/mac/install/",children:"https://docs.docker.com/desktop/mac/install/"}),"\nDescarga e instala Docker Desktop para Mac."]}),"\n",(0,r.jsx)(a.p,{children:"Abre Docker Desktop y aseg\xfarate que est\xe9 corriendo."}),"\n",(0,r.jsx)(a.p,{children:"Verifica desde Terminal:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"docker --version\ndocker compose version\n"})}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/dockerinstall.png",alt:"Terminal mostrando la versi\xf3n de docker instalada, texto \nvisible: docker version 17.0.2 2022-01-18, ambiente de desarrollo en macOS, tono informativo y neutral",width:"600"}),"\n",(0,r.jsx)(a.h3,{id:"instalar-homebrew-si-no-lo-tienes",children:"Instalar Homebrew (si no lo tienes)"}),"\n",(0,r.jsx)(a.p,{children:"Si no tienes Homebrew, instala con:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n'})}),"\n",(0,r.jsx)(a.h3,{id:"java-jdk-opcional",children:"JAVA JDK (opcional)"}),"\n",(0,r.jsx)(a.p,{children:"Verificamos si tenemos intalado java"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"java -version\n"})}),"\n",(0,r.jsx)(a.p,{children:"En caso de que lo tengas instalado continua al siguiente paso de instalaci\xf3n de liquibase"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:"Instalaci\xf3n"}),"\n",(0,r.jsx)(a.p,{children:"Para instalarlo tendremos que usar el siguiente comando en caso de usar hombrew"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"brew install openjdk@17\n"})}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:"A\xf1ade a tu PATH (varia segun la versi\xf3n estalada)"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"sudo ln -sfn $(brew --prefix openjdk@17)/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-17.jdk\necho 'export PATH=\"/usr/local/opt/openjdk@17/bin:$PATH\"' >> ~/.zshrc\nsource ~/.zshrc\n"})}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:"Volvemos a repetir la verficaci\xf3n del JDK"}),"\n",(0,r.jsx)(a.p,{children:"Verificamos si tenemos instalado Java."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"java -version\n"})}),"\n",(0,r.jsx)(a.p,{children:"Si est\xe1 instalado, ver\xe1s una salida similar a la siguiente imagen:"}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/terminal_susses_jdk.png",alt:"Terminal mostrando la versi\xf3n de Java instalada, texto visible: openjdk version 17.0.2 2022-01-18, ambiente de desarrollo en macOS, tono informativo y neutral",width:"600"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"instalemos-el-cli-de-liquibase-opcional",children:"Instalemos el CLI de liquibase (Opcional)"}),"\n",(0,r.jsx)(a.p,{children:"La forma mas facil de inplementarlo es unsado brew en el caso de mac"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"brew install liquibase\n"})}),"\n",(0,r.jsx)(a.p,{children:"verifica la instalaci\xf3n"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"liquibase --version\n"})}),"\n",(0,r.jsx)(a.p,{children:"una vez instalado si lo realizaste des de tu terminal en mac si puebas el comando de version si sale algo\ncomo la siguiente imagen todo estara correctamente y podremos seguir sin problema \ud83d\ude03."}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/liquibase_install.png",alt:"Terminal mostrando la versi\xf3n de liquibase instalada, texto \nvisible: openjdk version 17.0.2 2022-01-18, ambiente de desarrollo en macOS, tono informativo y neutral",width:"600"}),"\n",(0,r.jsx)(a.h3,{id:"instalar-cliente-postgresql-opcional",children:"Instalar cliente PostgreSQL (opcional)"}),"\n",(0,r.jsx)(a.p,{children:"Para interactuar con la base de datos de uba forna m\xe1s facil puede usar al igual que yo el cliente des Postgres:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"brew install postgresql\nLuego \n"})}),"\n",(0,r.jsxs)(a.p,{children:["prueba conectarte una vez este levantes el ",(0,r.jsx)(a.strong,{children:"docker-compose"}),":"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"psql -h localhost -U liquibase -d liquibase_demo\nContrase\xf1a: liquibase\n"})}),"\n",(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{children:"Opci\xf3n"}),(0,r.jsx)(a.th,{children:"Significado"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"psql"})}),(0,r.jsx)(a.td,{children:"Cliente de l\xednea de comandos de PostgreSQL"})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"-h localhost"})}),(0,r.jsxs)(a.td,{children:["Host de la base de datos (en este caso, ",(0,r.jsx)(a.code,{children:"localhost"}),")"]})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"-U liquibase"})}),(0,r.jsxs)(a.td,{children:["Usuario con el que se conecta (",(0,r.jsx)(a.code,{children:"liquibase"}),")"]})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"-d liquibase_demo"})}),(0,r.jsxs)(a.td,{children:["Base de datos a la que se conecta (",(0,r.jsx)(a.code,{children:"liquibase_demo"}),")"]})]})]})]}),"\n",(0,r.jsx)(a.hr,{}),"\n",(0,r.jsx)(a.h3,{id:"iniciemos-con-nuestro-laboratorio-",children:"Iniciemos con nuestro laboratorio \ud83d\ude03"}),"\n",(0,r.jsx)(a.p,{children:"Genial!!, Si todo t\xe9 sali\xf3 bien, en este punto ya deber\xedamos tener instalados todo lo necesario para poder iniciar\na colocar las primeras l\xedneas de c\xf3digo para implementar nuestro laboratorio \ud83e\udd73."}),"\n",(0,r.jsx)(a.p,{children:"para realizar nuestra prueba inicial implementaremos la siguiente estructura de carpetas"}),"\n",(0,r.jsx)(a.h3,{id:"\ufe0f-estructura-del-proyecto",children:"\ud83d\uddc2\ufe0f estructura del proyecto"}),"\n",(0,r.jsxs)(a.p,{children:["esta estructuras es una estructura b\xe1sica solamente realizada para la prueba, para realizar un proyecto a un nivel\nmas producci\xf3n deber\xe1s realizar algunos cambios que tal vez dejar\xe9 en otro apartado, ya que lo que buscamos en este\nlaboratorio es experimentar y entender como funciona ",(0,r.jsx)(a.strong,{children:"liquibase"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Tree"',children:"liquibase-lab/\n\u251c\u2500\u2500 changelogs/\n\u2502   \u251c\u2500\u2500 db.changelog-master.yaml\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 liquibase.properties\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 .gitignore (opcional)\n"})}),"\n",(0,r.jsx)(a.h4,{id:"-descripci\xf3n-de-archivos-y-carpetas",children:"\ud83d\udcdd Descripci\xf3n de Archivos y Carpetas"}),"\n",(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{children:"Archivo/Carpeta"}),(0,r.jsx)(a.th,{children:"Descripci\xf3n"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"changelogs/"})}),(0,r.jsx)(a.td,{children:"Carpeta que contiene todos los archivos de cambios (changelogs)."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"db.changelog-master.yaml"})}),(0,r.jsx)(a.td,{children:"Changelog principal que act\xfaa como punto de entrada e incluye otros."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsxs)(a.td,{children:[(0,r.jsx)(a.code,{children:"001-*.yaml"}),", ",(0,r.jsx)(a.code,{children:"002-*.yaml"})]}),(0,r.jsx)(a.td,{children:"Archivos con cambios individuales, ordenados por prefijo num\xe9rico."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"docker-compose.yml"})}),(0,r.jsx)(a.td,{children:"Archivo para levantar la base de datos PostgreSQL con Docker."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"liquibase.properties"})}),(0,r.jsx)(a.td,{children:"Archivo de configuraci\xf3n de Liquibase: conexi\xf3n, changelog, credenciales."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"README.md"})}),(0,r.jsx)(a.td,{children:"Documentaci\xf3n y notas del laboratorio."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:".gitignore"})}),(0,r.jsx)(a.td,{children:"Opcional. Ignora archivos temporales, logs, etc., si usas Git."})]})]})]}),"\n",(0,r.jsx)(a.h4,{id:"-crea-rapidamente-la-estructura-desde-cero",children:"\ud83e\ude84 Crea rapidamente la estructura desde cero"}),"\n",(0,r.jsx)(a.p,{children:"Con el siguiente comando podr\xe1s crear toda la estructur\xe1 sin ning\xfan problema desde tu terminal, estos tambi\xe9n sirven en\nlinux"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"> $ mkdir liquibase-lab\n> $ cd liquibase-lab\n> $ mkdir changelogs\n> $ touch docker-compose.yml liquibase.properties changelogs/db.changelog-master.yaml README.md\n"})}),"\n",(0,r.jsx)(a.p,{children:"Una vez ya tengas la estructura creada puedes abrir tu VS Code y utilizarlo para seguir con el siguiente paso"}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/liquibasevscode.png",width:"600"}),"\n",(0,r.jsx)(a.h2,{id:"\ufe0f-cremos-nuestro-docker-compose",children:"\ud83c\udfd7\ufe0f Cremos nuestro Docker-compose"}),"\n",(0,r.jsx)(a.p,{children:"Ahora escribiremos el siguiente c\xf3digo que lleva la configuraci\xf3n de nuestro compose, junto con los diferentes\nvol\xfamenes que nos ayudaran a mantener que persista nuestra data"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Docker-Compose"',children:'    services:\n    db:  # Servicio de base de datos PostgreSQL\n        image: postgres:14  # Imagen oficial de PostgreSQL, versi\xf3n 14\n        container_name: liquibase_db  # Nombre del contenedor para referencia f\xe1cil\n        environment:  # Variables de entorno para crear la base de datos inicial\n        POSTGRES_USER: liquibase      # Usuario con permisos\n        POSTGRES_PASSWORD: liquibase  # Contrase\xf1a del usuario\n        POSTGRES_DB: liquibase_demo   # Nombre de la base de datos a crear\n        ports:\n        - "5432:5432"  # Expone el puerto de PostgreSQL al host local\n        networks:\n        - liquibase-net  # Conecta este servicio a una red personalizada\n        healthcheck:  # Verifica que PostgreSQL est\xe9 listo antes de continuar\n        test: ["CMD", "pg_isready", "-U", "liquibase"]\n        interval: 5s\n        timeout: 5s\n        retries: 5\n\n    liquibase:  # Servicio para ejecutar comandos de Liquibase CLI\n        image: liquibase/liquibase:latest  # Imagen oficial de Liquibase\n        container_name: liquibase_cli  # Nombre del contenedor de Liquibase\n        depends_on:\n        db:\n            condition: service_healthy  # Espera a que la base de datos est\xe9 lista\n        volumes:  # Mapea archivos locales al contenedor\n        - ./changelogs:/liquibase/changelogs  # Cambios en la BD\n        - ./liquibase.properties:/liquibase/liquibase.properties  # Configuraci\xf3n\n        working_dir: /liquibase  # Carpeta por defecto donde ejecuta comandos\n        entrypoint: ["tail", "-f", "/dev/null"]  # Mantiene el contenedor en ejecuci\xf3n para uso interactivo\n        networks:\n        - liquibase-net  # Se conecta a la misma red que la BD\n\n    networks:\n    liquibase-net:  # Red personalizada para que los servicios se comuniquen por nombre\n\n'})}),"\n",(0,r.jsx)(a.h2,{id:"creemos-nuestro-liquibaseproperties",children:"Creemos nuestro liquibase.properties"}),"\n",(0,r.jsxs)(a.p,{children:["Si seguiste la gu\xeda, hasta este punto en los archivos necesarios que creamos encontraras el ",(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"liquibase.properties"})}),"\nel cual es el archivo que contendr\xe1 la configuraci\xf3n de nuestro liquibase, es el encargado de decirle a liquibase ",(0,r.jsx)(a.strong,{children:"como\nconectarse ala base de datos"})," y donde encontrar los archivos de cambios(changelogs)."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="liquibase.properties"',children:"# liquibase.properties\nchangeLogFile: changelogs/db.changelog-master.yaml\nurl: jdbc:postgresql://db:5432/liquibase_demo\nusername: liquibase\npassword: liquibase\ndriver: org.postgresql.Driver\nlogLevel: info\n"})}),"\n",(0,r.jsx)(a.p,{children:"| OJO: en el url, el host es db, el nombre del servicio del contenedor."}),"\n",(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{children:"Propiedad"}),(0,r.jsx)(a.th,{children:"Descripci\xf3n"}),(0,r.jsx)(a.th,{children:"Ejemplo"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"changeLogFile"})}),(0,r.jsx)(a.td,{children:"Ruta al archivo principal de cambios de base de datos (changelog)."}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"changelogs/db.changelog.yaml"})})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"url"})}),(0,r.jsx)(a.td,{children:"URL de conexi\xf3n JDBC que indica el tipo de base de datos, host, puerto y nombre de la base."}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"jdbc:postgresql://db:5432/liquibase_demo"})})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"username"})}),(0,r.jsx)(a.td,{children:"Usuario con permisos para ejecutar cambios en la base de datos."}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"liquibase"})})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"password"})}),(0,r.jsx)(a.td,{children:"Contrase\xf1a del usuario de la base de datos."}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"liquibase"})})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"driver"})}),(0,r.jsx)(a.td,{children:"Clase del driver JDBC correspondiente al motor de base de datos."}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"org.postgresql.Driver"})})]})]})]}),"\n",(0,r.jsx)(a.h2,{id:"-vamos-a-crear-nuestro-changelog",children:"\ud83e\udde0 Vamos a crear nuestro changelog"}),"\n",(0,r.jsx)(a.p,{children:"\xbfQu\xe9 hace db.changelog-master.yaml?Es un archivo maestro que organiza los cambios en la base de datos. Su funci\xf3n principal es referenciar otros archivos de\ncambios (por orden y modularidad), o contener directamente las instrucciones (changeSets) que Liquibase aplicar\xe1."}),"\n",(0,r.jsxs)(a.p,{children:["En este caso tenemos dos formas para poder crear nuestro ",(0,r.jsx)(a.strong,{children:"changelog"})," en este ejemplo dejar\xe9 las referencias a las dos formas, para que entiendas que podemos\nhacer."]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["opci\xf3n 1\nEn este caso se implementa un solo archivo maestro que contendra todos los ",(0,r.jsx)(a.strong,{children:"changeSets"})]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="databaseChangeLog"',children:"databaseChangeLog:\n- changeSet:\n    id: 001\n    author: alejo\n    changes:\n        - createTable:\n            tableName: users\n            columns:\n            - column:\n                name: id\n                type: UUID\n                constraints:\n                    primaryKey: true\n            - column:\n                name: name\n                type: VARCHAR(100)\n"})}),"\n",(0,r.jsx)(a.p,{children:"De esta forma tendr\xe1s que tener el proyecto si utilizas esta opci\xf3n."}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/changelogmaster.png",width:"600"}),"\n",(0,r.jsx)(a.p,{children:"| \u26a0\ufe0f Esto es \xfatil en proyectos peque\xf1os o cuando prefieres tener todo en un solo archivo lo cual puede generar al gunos problemas a largo plazo"}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["opci\xf3n 2\nEn este caso se implementa un archivo que contendr\xe1 todos los modelos de (changeSets), en el que tendremos las rutas de los ",(0,r.jsx)(a.strong,{children:"changeSets"})]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="databaseChangeLog-master"',children:"# changelogs/db.changelog-master.yaml\ndatabaseChangeLog:\n- include:\n    file: changelogs/001-init-schema.yaml\n"})}),"\n",(0,r.jsx)(a.p,{children:"| Cada changeSet es \xfanico por id + author. No repitas estos valores."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="changelogs/001-init-schema.yaml"',children:"    databaseChangeLog:\n    - changeSet:\n        id: 001\n        author: alejo\n        changes:\n            - createTable:\n                tableName: users\n                columns:\n                - column:\n                    name: id\n                    type: UUID\n                    constraints:\n                        primaryKey: true\n                - column:\n                    name: name\n                    type: VARCHAR(100)\n                - column:\n                    name: email\n                    type: VARCHAR(150)\n"})}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/liquivasetreeprod.png",width:"600"}),"\n",(0,r.jsx)(a.p,{children:"\u2705 Este modelo de carpetas te permitir\xe1 escalar de una forma m\xe1s f\xe1cil y poder versionar todos tus cambios de una forma eficiente, en caso de que quieras\nrealizar alg\xfan cambio"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"vamos-a-correr-nuestro-poyecto",children:"Vamos a correr nuestro poyecto"}),"\n",(0,r.jsxs)(a.p,{children:["Perfecto si llegaste hasta aqu\xed ya podemos correr los comandos de nuestro \ud83d\udc33 ",(0,r.jsx)(a.strong,{children:"docker-compose"})," para correr el proyecto"]}),"\n",(0,r.jsx)(a.p,{children:"\u2705 1. Levantar los servicios en segundo plano\nEsto crea y arranca los contenedores:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"docker compose up -d\n"})}),"\n",(0,r.jsxs)(a.p,{children:["| \ud83d\udd0d Esto arrancar\xe1 el contenedor de PostgreSQL y lo dejar\xe1 corriendo en segundo plano ya que usamos ",(0,r.jsx)(a.strong,{children:"-d"}),"."]}),"\n",(0,r.jsx)(a.p,{children:"\u2705 2. Verificar que la base de datos est\xe1 lista\nLiquibase depende de que la base de datos est\xe9 lista. Aseg\xfarate de que el servicio db est\xe9 healthy:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"docker compose ps\n"})}),"\n",(0,r.jsx)(a.p,{children:"veras algo como esto"}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/liquivasetreeprod.png",width:"600"}),"\n",(0,r.jsx)(a.h3,{id:"-c\xf3mo-sabe-liquibase-qu\xe9-ya-corri\xf3",children:"\ud83e\udde0 \xbfC\xf3mo sabe Liquibase qu\xe9 ya corri\xf3?"}),"\n",(0,r.jsx)(a.p,{children:"Liquibase registra los changeSets ejecutados en una tabla llamada DATABASECHANGELOG. As\xed evita repetir cambios y permite auditar qu\xe9 se aplic\xf3, cu\xe1ndo y por qui\xe9n."}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/liquibaserun.png",width:"600"}),"\n",(0,r.jsx)(a.p,{children:"En este punto ya tenemos nuestros servicios corriendo, y con ya podremos ejecutar"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"docker exec -it liquibase_cli liquibase update\n"})}),"\n",(0,r.jsx)(a.p,{children:"Si todo te sale bien, deber\xe1s ver algo como se ve en la imagen."}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/primerejecucion.png",width:"600"}),"\n",(0,r.jsx)(a.p,{children:"| Esto ejecutar\xe1 todos los changeSets del archivo db.changelog-master.yaml y aplicar\xe1 los cambios en la base de datos PostgreSQL."}),"\n",(0,r.jsx)(a.h3,{id:"-por-qu\xe9-se-crea-autom\xe1ticamente",children:"\ud83e\udde0 \xbfPor qu\xe9 se crea autom\xe1ticamente?"}),"\n",(0,r.jsx)(a.p,{children:"La base de datos se crea autom\xe1ticamente porque se lo est\xe1s indicando al contenedor de PostgreSQL con POSTGRES_DB al inicio."}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/conectiondb.png",width:"600"}),"\n",(0,r.jsxs)(a.p,{children:["y en nuestra base de datos ",(0,r.jsx)(a.strong,{children:"Postgres"})," podremos ver lo siguiente"]}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/basededatos.png",width:"600"}),"\n",(0,r.jsxs)(a.p,{children:["Cuando corremos este comando ",(0,r.jsx)(a.strong,{children:"liquibase"})," se crearan dos tablas ",(0,r.jsx)(a.code,{children:"databasechangelog"})," y ",(0,r.jsx)(a.code,{children:"databasechangeloglock"})]}),"\n",(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{children:"Tabla"}),(0,r.jsx)(a.th,{children:"\xbfPara qu\xe9 sirve?"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"databasechangelog"})}),(0,r.jsx)(a.td,{children:"Historial de cambios ya aplicados"})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"databasechangeloglock"})}),(0,r.jsx)(a.td,{children:"Evita conflictos por ejecuci\xf3n simult\xe1nea"})]})]})]}),"\n",(0,r.jsxs)(a.p,{children:["Genial hasta este punto ya tenemos nuestro proyecto creado y corriendo, ahora realizaremos una actualizaci\xf3n a la tabla ",(0,r.jsx)(a.code,{children:"users"})," que creamos\ndonde crearemos un ",(0,r.jsx)(a.code,{children:"changeSet"})]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["Creemos otro archivo dentro de nuestra carpeta ",(0,r.jsx)(a.code,{children:"changelogs"})," con el nombre ",(0,r.jsx)(a.code,{children:"002-create-users-table.yaml"})]}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"databaseChangeLog:\n- changeSet:\n    id: 002\n    author: alejo\n    changes:\n        - addColumn:\n            tableName: users\n            columns:\n            - column:\n                name: birthdate\n                type: DATE\n"})}),"\n",(0,r.jsx)(a.p,{children:"|Cada changeSet es \xfanico por id + author. No repitas estos valores."}),"\n",(0,r.jsxs)(a.p,{children:["En este caso aremos un cambio ala tabla ",(0,r.jsx)(a.code,{children:"users"})," donde agregaremos la columna de ",(0,r.jsx)(a.strong,{children:"birthdate"})]}),"\n",(0,r.jsx)(a.p,{children:"Ya creado nuestro archivo ejecutaremos nuevamente nuestro comando, que generara los cambios en la base de datos."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"docker exec -it liquibase_cli liquibase update\n"})}),"\n",(0,r.jsx)(a.p,{children:"al ejecutar deber\xe1 salir lo que se ve en la siguiente imagen"}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/runliquibasechange.png",width:"600"}),"\n",(0,r.jsx)(a.p,{children:"Para comprobar el cambio te puedes conectar ala base de datos y validar que se crearon los campos como los definimos"}),"\n",(0,r.jsx)(a.h3,{id:"c\xf3mo-funciona-el-rollback",children:"\xbfC\xf3mo funciona el rollback?"}),"\n",(0,r.jsx)(a.p,{children:"Liquibase puede revertir cambios de varias maneras, pero solo si sabe c\xf3mo hacerlo. Esto es posible si:"}),"\n",(0,r.jsx)(a.p,{children:"El changeSet tiene rollback autom\xe1tico (por ejemplo, createTable se puede revertir con dropTable).\nT\xfa defines expl\xedcitamente el rollback en tu changeSet."}),"\n",(0,r.jsx)(a.h3,{id:"como-podemos-rollback",children:"Como podemos rollback"}),"\n",(0,r.jsx)(a.p,{children:"Liquibase permite revertir usando distintos comandos:"}),"\n",(0,r.jsx)(a.h4,{id:"-ejemplo-de-rollback",children:"\ud83d\udd01 Ejemplo de rollback"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Agregamos a nuestro changelog nuestra actualizaci\xf3n"}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"databaseChangeLog:\n- changeSet:\n    id: 003\n    author: alejo\n    changes:\n        - addColumn:\n            tableName: users\n            columns:\n            - column:\n                name: age\n                type: INT\n    rollback:\n        - dropColumn:\n            columnName: age\n            tableName: users\n"})}),"\n",(0,r.jsx)(a.p,{children:"Este archivo:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:"Agrega una columna age a la tabla users."}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:"Define que el rollback elimina esa columna."}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["Actualizamos nuestr archivo \ud83d\udcd8 ",(0,r.jsx)(a.code,{children:"db.changelog-master.yaml"})]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"databaseChangeLog:\n    - include:\n        file: changelogs/001-create-table-user.yaml\n    - include:\n        file: changelogs/002-insert-users.yaml\n    - include:\n        file: changelogs/003-add-column-age.yaml\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"Deberas tener algo asi, como se ve en la siguiente imagen"}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/rollbackliquibase.png",width:"600"}),"\n",(0,r.jsxs)(a.p,{children:["Hora vamos a ejecutarlo, En este caso corremos primeros nuestra actualizaci\xf3n, donde se agregar\xe1 ",(0,r.jsx)(a.code,{children:"ege"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"    docker exec -it liquibase_cli liquibase update\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Como s\xe9 que todo t\xe9 sali\xf3 bien deber\xe1 salirte en tu consola algo como esto y en tu tabla debi\xf3 aparecer la columna ",(0,r.jsx)(a.code,{children:"ege"})]}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/addege.png",width:"600"}),"\n",(0,r.jsx)(a.p,{children:"Para realizar el rollback tienes varias opciones, aqu\xed dejar\xe9 dos que puedes usar sin problema"}),"\n",(0,r.jsx)(a.h4,{id:"-1-rollback-de-un-changeset-espec\xedfico-desde-003",children:"\ud83d\udd01 1. Rollback de un changeSet espec\xedfico (desde 003)"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:"docker compose exec liquibase liquibase rollbackCount 1\n"})}),"\n",(0,r.jsx)(a.p,{children:"Este revierte el \xfaltimo cambio (003), usando el bloque rollback."}),"\n",(0,r.jsx)(a.h4,{id:"-2-rollback-por-id",children:"\ud83d\udd01 2. Rollback por ID"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Bash"',children:'    docker compose exec liquibase liquibase liquibase rollbackToDate "2025-06-11T20:00:00"\n'})}),"\n",(0,r.jsx)(a.p,{children:"Este revierte todos los cambios hasta (pero no incluyendo) el changeSet con id: 002."}),"\n",(0,r.jsx)(a.p,{children:"Si se aplica el rollback volveremos a la versi\xf3n 002 de una forma f\xe1cil."}),"\n",(0,r.jsx)("img",{src:"/img/blog/devops/rollbacksucces.png",width:"600"}),"\n",(0,r.jsx)(a.h3,{id:"tabla-comandos-",children:"Tabla comandos \ud83c\udfae"}),"\n",(0,r.jsx)(a.p,{children:"Aqu\xed encontrar\xe1s una serie de comandos que puedes ejecutar para que sigas probando las otras funcionalidades que tiene liquibase.\nTe invito a probar y testear todo lo que quieras."}),"\n",(0,r.jsxs)(a.p,{children:["Puedes agregar ",(0,r.jsx)(a.code,{children:"exec -it"})," para ver hacer la terminal interactiva"]}),"\n",(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{children:"Comando"}),(0,r.jsx)(a.th,{children:"\xbfPara qu\xe9 sirve?"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"docker compose run liquibase update"})}),(0,r.jsxs)(a.td,{children:["Aplica todos los ",(0,r.jsx)(a.code,{children:"changeSet"})," pendientes definidos en el changelog maestro."]})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"docker compose run liquibase status"})}),(0,r.jsx)(a.td,{children:"Muestra qu\xe9 cambios (changeSets) a\xfan no se han aplicado a la base de datos."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"docker compose run liquibase history"})}),(0,r.jsxs)(a.td,{children:["Lista todos los ",(0,r.jsx)(a.code,{children:"changeSets"})," ya aplicados con detalles (fecha, autor, id)."]})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"docker compose run liquibase rollbackCount 1"})}),(0,r.jsxs)(a.td,{children:["Revierte el \xfaltimo cambio aplicado (puedes cambiar ",(0,r.jsx)(a.code,{children:"1"})," por otro n\xfamero)."]})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"docker compose run liquibase rollbackToDate 2024-01-01"})}),(0,r.jsx)(a.td,{children:"Revierte todos los cambios hechos despu\xe9s de una fecha espec\xedfica."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"docker compose run liquibase validate"})}),(0,r.jsx)(a.td,{children:"Valida el archivo changelog, revisa errores de sintaxis o duplicados."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"docker compose run liquibase clearCheckSums"})}),(0,r.jsx)(a.td,{children:"Limpia los checksums para forzar revalidaci\xf3n de cambios. \xdatil si editaste sets."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"docker compose run liquibase changelogSync"})}),(0,r.jsx)(a.td,{children:"Marca todos los cambios como aplicados sin ejecutarlos (\xa1\xfatil en producci\xf3n!)."})]})]})]}),"\n",(0,r.jsx)(a.h2,{id:"errores",children:"Errores"}),"\n",(0,r.jsx)(a.p,{children:"Como siempre cometemos errores, durante la primera configuraci\xf3n implementan mal la conexi\xf3n a la base de datos\ndebido a que estaba apuntando al local host, el cual hace que apunte dentro de su propio contenedor, por eso no lo encontraba\nentonces esto se lo correg\xed  el par\xe1metro url."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",metastring:'title="Error"',children:"# liquibase.properties\nConnection could not be created to jdbc:postgresql://localhost:5432/liquibase_demo\n"})}),"\n",(0,r.jsx)(a.p,{children:"| Est\xe1s diciendo que se conecte a localhost (jdbc:postgresql://localhost:5432)"}),"\n",(0,r.jsx)(a.h3,{id:"gracias--por-llegar-hasta-este-punto",children:"Gracias \ud83e\udd29 por llegar hasta este punto"}),"\n",(0,r.jsxs)(a.p,{children:["A\xfan quedan muchas cosas por explorar de ",(0,r.jsx)(a.strong,{children:"liquibase"}),", pero te agradezco por tomarte el tiempo de entrar a este blog. El c\xf3digo implementado\nlo puedes encontrar en m\xed git-hub ",(0,r.jsx)(a.a,{href:"https://github.com/alejo95/liquibase-lab",children:"alejo95/Liquibase-lab"})]}),"\n",(0,r.jsx)(a.h3,{id:"mi-punto-de-vista",children:"Mi punto de vista"}),"\n",(0,r.jsxs)(a.p,{children:["En realidad, es genial este tipo de herramientas que facilitan la actualizaci\xf3n de las bases de datos usando pr\xe1cticas\ndel mundo ",(0,r.jsx)(a.strong,{children:"DevOps"}),", para m\xed fue una experiencia genial, ya que me permite entender de una forma f\xe1cil la implementaci\xf3n\nde actualizaciones r\xe1pidas a la base de datos, aparte de eso, cuenta con muchas cualidades que ayudan a esta herramienta mejore\nel flujo de trabajo es un ",(0,r.jsx)(a.strong,{children:"100%"}),", ya que logramos romper esa barra entre el equipo."]}),"\n",(0,r.jsx)(a.p,{children:"Dejar\xe9 una lista de 10 ventajas que tiene liquibase"}),"\n",(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{children:"N\xba"}),(0,r.jsx)(a.th,{children:"Ventaja"}),(0,r.jsx)(a.th,{children:"Descripci\xf3n"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"1"}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.strong,{children:"Control de versiones"})}),(0,r.jsx)(a.td,{children:"Lleva historial detallado de los cambios en la base de datos, como Git para el c\xf3digo."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"2"}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.strong,{children:"Rollback autom\xe1tico"})}),(0,r.jsx)(a.td,{children:"Permite revertir cambios f\xe1cilmente usando tags, fechas o n\xfamero de cambiosets."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"3"}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.strong,{children:"Seguridad y consistencia"})}),(0,r.jsx)(a.td,{children:"Asegura que los cambios se apliquen una sola vez y en el orden correcto."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"4"}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.strong,{children:"Integraci\xf3n con CI/CD"})}),(0,r.jsx)(a.td,{children:"Se puede integrar en pipelines para aplicar cambios autom\xe1ticamente."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"5"}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.strong,{children:"Soporte multiplataforma"})}),(0,r.jsx)(a.td,{children:"Compatible con PostgreSQL, MySQL, Oracle, SQL Server, H2, entre otros."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"6"}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.strong,{children:"Soporte para m\xfaltiples formatos"})}),(0,r.jsx)(a.td,{children:"Cambios escritos en XML, YAML, JSON o SQL, seg\xfan la preferencia del equipo."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"7"}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.strong,{children:"Ejecuci\xf3n simulada (dry run)"})}),(0,r.jsxs)(a.td,{children:["Permite previsualizar cambios sin aplicarlos realmente (",(0,r.jsx)(a.code,{children:"updateSQL"}),", ",(0,r.jsx)(a.code,{children:"rollbackSQL"}),")."]})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"8"}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.strong,{children:"Gesti\xf3n de bloqueos"})}),(0,r.jsx)(a.td,{children:"Usa locking para evitar conflictos cuando varios procesos intentan modificar la DB."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"9"}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.strong,{children:"Historial centralizado"})}),(0,r.jsxs)(a.td,{children:["Registra todos los cambios aplicados en tablas internas (",(0,r.jsx)(a.code,{children:"databasechangelog"}),")."]})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"10"}),(0,r.jsx)(a.td,{children:(0,r.jsx)(a.strong,{children:"Comparaci\xf3n de esquemas"})}),(0,r.jsxs)(a.td,{children:[(0,r.jsx)(a.code,{children:"liquibase diff"})," compara dos bases de datos y genera un changelog autom\xe1ticamente."]})]})]})]})]})}function u(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},8105:e=>{e.exports=JSON.parse('{"permalink":"/blog/liquibase","editUrl":"http://iamdevops.site/my_page/edit/main/blog/2025/repository_management/liquibase.md","source":"@site/blog/2025/repository_management/liquibase.md","title":"Database DevOps con Liquibase","description":"Hola, amigos \ud83d\ude03 DevOps. Hoy hablaremos sobre Database DevOps.","date":"2025-06-12T00:00:00.000Z","tags":[{"inline":false,"label":"Liquibase","permalink":"/blog/tags/tags/liquibase"},{"inline":false,"label":"Database","permalink":"/blog/tags/tags/database"},{"inline":false,"label":"DevOps","permalink":"/blog/tags/tags/devops"},{"inline":false,"label":"Database DevOps","permalink":"/blog/tags/tags/databasedevops"}],"readingTime":17.11,"hasTruncateMarker":true,"authors":[{"name":"Alejandro Ram\xedrez","title":"Software Engineer | DevOps | Back-end Developer","url":"https://alejo95.github.io/my_page/about_me","description":"Alejandro Ram\xedrez is a back-end developer with a passion for creating efficient and scalable applications. He has a strong background in software development and is always eager to learn new technologies.\\n","social":{"linkedin":"https://www.linkedin.com/in/alejandro-ramirez-95/"},"imageURL":"https://avatars.githubusercontent.com/u/30883786?s=96&v=4","key":"alejandro-ramirez","page":null}],"frontMatter":{"slug":"liquibase","sidebar_position":3,"title":"Database DevOps con Liquibase","tags":["liquibase","database","devops","databasedevops"],"authors":"alejandro-ramirez","date":"2025-06-12T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Aprendiendo iaC con Vagrant","permalink":"/blog/vagrant"},"nextItem":{"title":"Nginx","permalink":"/blog/entendiendo_nginx"}}')},8453:(e,a,s)=>{s.d(a,{R:()=>o,x:()=>l});var n=s(6540);const r={},i=n.createContext(r);function o(e){const a=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);