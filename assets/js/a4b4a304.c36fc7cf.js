"use strict";(self.webpackChunkmy_page=self.webpackChunkmy_page||[]).push([[434],{6376:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"manejo-del-repositorio","metadata":{"permalink":"/my_page/blog/manejo-del-repositorio","editUrl":"http://iamdevops.site/my_page/edit/main/blog/2025/repository_management/repository_management.md","source":"@site/blog/2025/repository_management/repository_management.md","title":"Manejo del repositorio","description":"Hola y bienvenidos a este blog, el cual est\xe1 orientado a entender como podemos manejar nuestros flujo","date":"2025-04-27T00:00:00.000Z","tags":[{"inline":false,"label":"Git","permalink":"/my_page/blog/tags/tags/git"},{"inline":false,"label":"Workflow","permalink":"/my_page/blog/tags/tags/workflow"},{"inline":false,"label":"Buenas Pr\xe1cticas","permalink":"/my_page/blog/tags/tags/buenas-practicas"}],"readingTime":3.295,"hasTruncateMarker":true,"authors":[{"name":"Alejandro Ram\xedrez","title":"Software Engineer | DevOps | Back-end Developer","url":"https://alejo95.github.io/my_page/about_me","description":"Alejandro Ram\xedrez is a back-end developer with a passion for creating efficient and scalable applications. He has a strong background in software development and is always eager to learn new technologies.\\n","social":{"linkedin":"https://www.linkedin.com/in/alejandro-ramirez-95/"},"imageURL":"https://avatars.githubusercontent.com/u/30883786?s=96&v=4","key":"alejandro-ramirez","page":null}],"frontMatter":{"slug":"manejo-del-repositorio","title":"Manejo del repositorio","tags":["git","workflow","buenas-practicas"],"authors":"alejandro-ramirez","date":"2025-04-27T00:00:00.000Z"},"unlisted":false},"content":"\x3c!-- truncate --\x3e\\n\\nHola y bienvenidos a este blog, el cual est\xe1 orientado a entender como podemos manejar nuestros flujo\\nde trabajo en git, haciendolo un poco mas claro y facil de entender en caso de tener algun problema\\nen **producci\xf3n** \ud83d\udca3 que es lo que no queremos que pase.\\n\\n## 1. Manejo de commits\\n\\nAl momento que generamos un commit es muy normal agregar el comentario sin una referencia las cuales nos\\nindiquen que estamos realizando en nuestro commit, para esto es recomendable usar banderas que nos permitan\\nentender que hicimos en nuestros commits para esto hacemos uso de las siguientes **Acciones** o **banderas**:\\n\\n- **[Acci\xf3n]**: identifica el tipo de commit\\n  - `feature` -  Se introduce una nueva caracter\xedstica con los cambios\\n  - `refactor` \u2013 C\xf3digo refactorizado que no corrige un error ni agrega una caracter\xedstica  \\n  - `docs` \u2013 Actualizaciones de la documentaci\xf3n, como el README u otros archivos de rebajas\\n  - `style` \u2013 Cambios que no afectan el significado del c\xf3digo, probablemente relacionados con el formato del c\xf3digo, como espacios en blanco, punto y coma faltantes, etc.\\n  - `test` \u2013 Incluyendo pruebas nuevas o corrigiendo pruebas anteriores\\n  - `perf` \u2013 Mejoras de rendimiento\\n  - `ci` \u2013 Relacionados con la integraci\xf3n continua\\n  - `build` \u2013 Cambios que afectan al sistema de compilaci\xf3n o dependencias externas\\n  - `revert` \u2013 revierte una confirmaci\xf3n anterior\\n\\n- **Cuerpo**: Entre 50 y 150 caracteres resaltando **\xbfqu\xe9?** y **\xbfpor qu\xe9?**.  \\n- **Idioma**: Ingl\xe9s.\\n\\n> **Ejemplo**  \\n> `[Added] validation so that the accounting information in the vendor once audited cannot be modified`  \\n> *(Comienza con may\xfascula y sin punto final.)*\\n\\n---\\n\\n## 1.2. Nomenclatura de ramas (branch)\\n\\nCon la nomenclatura la idea es siempre buscar identificar las ramas donde estamos trabajando y as\xed llevar\\nun flujo de versiones saludable, que sea f\xe1cil de entender, en este ejemplo usaremos una nomenclatura basada\\nen el flujo de trabajo de Git Flow.\\n\\nSiguiendo Git Flow te encontrar\xe1s con las siguientes ramas:\\n\\n- **master**: versiones estables en producci\xf3n (`vX.Y.Z`).  \\n- **develop**: integraci\xf3n de nuevas features.  \\n- **feature/***: desarrollo de caracter\xedsticas (desde `develop`).  \\n- **release/***: preparaci\xf3n de la pr\xf3xima versi\xf3n (desde `develop`).  \\n- **hotfix/***: correcciones urgentes (desde `master`).\\n\\n![Git Flow Diagram](/img/blog/Deploymentflow.png)\\n\\n---\\n\\n### Hoja de trucos (Comandos)\\n\\nEsta hoja de trucos tiene los **comandos** mas utilizados dentro del flujo de trabajo \ud83e\uddd1\ud83c\udffc\u200d\ud83d\udcbb, dentro de mi\\nconsideraci\xf3n son los que mas usaras durante tu carrera como programor o algunas de sus ramas.\\n\\naqui les dejo \ud83d\udc4c\\n\\n---\\n\\n| Operaci\xf3n                                    | Comando                                                |\\n|----------------------------------------------|--------------------------------------------------------|\\n| Clonar repositorio                           | `git clone ssh://usuario@dominio.com/repo.git`         |\\n| Crear repo local                             | `git init`                                             |\\n| Estado de archivos                           | `git status`                                           |\\n| Ver diferencias                              | `git diff`                                             |\\n| A\xf1adir todos los cambios                     | `git add .`                                            |\\n| Commit con mensaje                           | `git commit -m \\"Mensaje descriptivo\\"`                  |\\n| Modificar \xfaltimo commit                      | `git commit --amend`                                   |\\n\\n---\\n\\n## Ramas y etiquetas\\n\\n| Operaci\xf3n                        | Comando                        |\\n|----------------------------------|--------------------------------|\\n| Listar ramas                     | `git branch`                   |\\n| Crear nueva rama                 | `git branch <nombre>`          |\\n| Cambiar de rama                  | `git checkout <nombre>`        |\\n| Etiquetar versi\xf3n                | `git tag v1.2.3`               |\\n\\n---\\n\\n## Actualizar y publicar\\n\\n| Operaci\xf3n                      | Comando                              |\\n|--------------------------------|--------------------------------------|\\n| Descargar cambios sin merge    | `git fetch`                          |\\n| Descargar y merge              | `git pull origin <branch>`           |\\n| Enviar cambios a remoto        | `git push origin <branch>`           |\\n| Enviar etiquetas               | `git push --tags`                    |\\n\\n---\\n\\n## Fusionar y rebase\\n\\n| Operaci\xf3n                | Comando                           |\\n|--------------------------|-----------------------------------|\\n| Merge                    | `git merge <branch>`              |\\n| Rebase                   | `git rebase <branch>`             |\\n| Abortar rebase           | `git rebase --abort`              |\\n| Continuar rebase         | `git rebase --continue`           |\\n\\n---\\n\\n## Deshacer\\n\\n| Operaci\xf3n                              | Comando                                 |\\n|----------------------------------------|-----------------------------------------|\\n| Reset total (descarta todo)            | `git reset --hard HEAD`                 |\\n| Descartar cambios en un archivo        | `git checkout HEAD <file>`              |\\n| Revertir un commit                     | `git revert <commit>`                   |\\n| Reset suave (preserva cambios staged)  | `git reset <commit>`                    |\\n\\n---"}]}}')}}]);